// Generated by dts-bundle-generator v9.5.1

export type BlogConfig = {
    title: string;
    url: string;
    postDir: string;
};
export type Category = {
    level: number;
    slug: string;
    path: string;
    display: string;
    order: number;
};
export type CategoryNode = Category & {
    subCategories: CategoryNode[];
};
export type CategoryFrontMatter = {
    display: string;
    order: number;
};
export type Post = {
    slug: string;
    title: string;
    description: string;
    content: string;
    date: Date;
    category: string;
    thumbnail: string | undefined;
    tags: string[];
};
export type PostFrontMatter = {
    title: string;
    description: string;
    date: Date;
    tags: string[];
    thumbnail: string | undefined;
};
export declare class CategoryService {
    private categoryPostCache;
    private cached;
    constructor(posts?: Post[]);
    private initializeCache;
    getAllCategoryPath(): string[];
    getAllRootCategory(): CategoryNode[];
    getCategoryChain(categoryPath: string): Category[];
    getCategory(categoryPath: string): Category;
    toCategoryNode(category: Category): CategoryNode;
    getAllPost(categoryPath: string): Post[];
}
export declare class PostService {
    private allPost;
    private cached;
    getAllPost(postDir?: string): Post[];
    getAllPostFromCategory(categoryPath: string, postDir?: string): Post[];
    getAllPostFromTag(tag: string, postDir?: string): Post[];
    getPost(slug: string, postDir?: string): Post;
}
declare class MapArrayCache<K, V extends unknown[]> {
    private cache;
    add(key: K, value: V[number]): void;
    get(key: K): V | undefined;
}
export declare class TagService {
    tags: Set<string>;
    tagPostCache: MapArrayCache<string, Post[]>;
    constructor(posts: Post[]);
    getAllTag(): string[];
    getAllPost(tag: string): Post[];
}
export declare const blogConfig: BlogConfig;

export {};
